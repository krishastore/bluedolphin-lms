/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/src/questions.js":
/*!************************************!*\
  !*** ./assets/js/src/questions.js ***!
  \************************************/
/***/ (() => {

eval("/**\r\n * This file contains the functions needed for the inline edit and show answers.\r\n *\r\n * @since 1.0.0\r\n * @output assets/js/questions.js\r\n */\n\nwindow.wp = window.wp || {};\n\n/**\r\n * Manages the quick edit and bulk edit windows for editing posts or pages.\r\n *\r\n * @namespace questionBank\r\n *\r\n * @since 1.0.0\r\n *\r\n * @type {Object}\r\n *\r\n * @property {string} type The type of inline editor.\r\n * @property {string} what The prefix before the post ID.\r\n *\r\n */\n(function ($, wp) {\n  // Store current screen data.\n  window._inlineEditQuestion = {\n    postId: 0,\n    editRowId: 0\n  };\n  window.questionBank = {\n    inlineEditQuestion: function () {\n      // we create a copy of the WP inline edit post function\n      if ('undefined' !== typeof inlineEditPost) {\n        var $wp_inline_edit = inlineEditPost.edit;\n\n        // and then we overwrite the function with our own code\n        inlineEditPost.edit = function (id) {\n          // \"call\" the original WP edit function\n          // we don't want to leave WordPress hanging\n\n          $wp_inline_edit.apply(this, arguments);\n\n          // now we take care of our business\n\n          // get the post ID\n          var $post_id = 0;\n          if (typeof id == 'object') {\n            $post_id = parseInt(this.getId(id));\n          }\n          if ($post_id > 0) {\n            // define the edit row\n            var $edit_row = $('#edit-' + $post_id);\n            var $post_row = $('#post-' + $post_id);\n\n            // get the data\n            var $levels = $('.column-levels', $post_row).text();\n            // populate the data\n            $('.inline-edit-levels select', $edit_row).val($levels?.toLowerCase());\n          }\n        };\n        $(document).on('click', '.show_answer a', function () {\n          var t = inlineEditPost,\n            q = questionBank;\n          var $this = $(this).parents('tr');\n          var id = t.getId($this);\n          var editData = $(this).data('inline_edit');\n          var type = editData?.type;\n          q.hideAnswers();\n          window._inlineEditQuestion = {\n            postId: id,\n            editRowId: t.what + id\n          };\n          $(this).attr('aria-expanded', 'true');\n\n          // Add the new edit row with an extra blank row underneath to maintain zebra striping.\n          var editRow = $('#inline-edit').clone(true);\n          var showAnswerHtml = $('#show_answer').html();\n          editRow.html(showAnswerHtml);\n          $('td', editRow).attr('colspan', $('th:visible, td:visible', '.widefat:first thead').length);\n\n          // Remove the ID from the copied row and let the `for` attribute reference the hidden ID.\n          $('td', editRow).find('#quick-edit-legend').removeAttr('id');\n          $('td', editRow).find('p[id^=\"quick-edit-\"]').removeAttr('id');\n          $(t.what + id).removeClass('is-expanded').hide().after(editRow).after('<tr class=\"hidden\"></tr>');\n\n          // Set inline edit data.\n          $('input[name=\"post_title\"]', editRow).val(editData?.title);\n          $('select#bdlms_answer_type', editRow).val(editData?.type);\n          $('.marks-input input', editRow).val(editData?.marks);\n          if (editData[type]) {\n            var optionList = $('.bdlms-options-table__body .bdlms-options-table__list-wrap', $('#' + type));\n            optionList.empty();\n            $.each(editData[type], function (n, i) {\n              var optionListTpl = $('#' + type + '_option').html();\n              optionListTpl = optionListTpl.replace('{{VALUE}}', i.option);\n              optionListTpl = optionListTpl.replace('{{checked}}', i.checked ? 'checked' : '');\n              optionListTpl = optionListTpl.replace('{{ANSWER_ID}}', n);\n              optionListTpl = optionListTpl.replace('{{OPTION_NO}}', questionObject.alphabets[n] ?? '');\n              $(optionListTpl).appendTo(optionList);\n            });\n            $('#' + type).removeClass('hidden');\n          } else if ('fill_blank' === type) {\n            var mandatoryTpl = $('#fill_blank_mandatory').html();\n            mandatoryTpl = mandatoryTpl.replace('{{VALUE}}', editData?.mandatory);\n            $('ul', '#' + type).empty();\n            $('ul', '#' + type).append(mandatoryTpl);\n            $.each(editData?.optional, function (i, optional) {\n              var optionalTpl = $('#fill_blank_optional').html();\n              optionalTpl = optionalTpl.replace('{{VALUE}}', optional);\n              $(optionalTpl).appendTo($('ul', '#' + type));\n            });\n            $('#' + type).removeClass('hidden');\n          }\n\n          // Trigger select type dropdown.\n          $('#bdlms_answer_type').change();\n\n          // Show edit row.\n          $(editRow).attr('id', 'edit-' + id).addClass('inline-editor').show();\n          q.initSortable(q);\n        });\n\n        // Hide answer box.\n        $(document).on('click', '.bdlms-cancel-answer', this.hideAnswers);\n      }\n    },\n    /**\r\n     * Initializes the inline editor.\r\n     */\n    init: function () {\n      var _this = this;\n      _this.inlineEditQuestion();\n      _this.initSortable(_this);\n\n      // Show / Hide answers.\n      $(document).on('change', '#bdlms_answer_type', function () {\n        var type = $(this).val();\n        if ('true_or_false' === type) {\n          $('.bdlms-add-option, .bdlms-show-ans-action .bdlms-add-answer').addClass('hidden');\n        } else {\n          $('.bdlms-add-option, .bdlms-show-ans-action .bdlms-add-answer').removeClass('hidden');\n        }\n        $('.bdlms-answer-group, .inline-edit-col-left .bdlms-options-table, .inline-edit-col-left .bdlms-add-accepted-answers').addClass('hidden');\n        $('#' + type).removeClass('hidden');\n      });\n      $('#bdlms_answer_type').change();\n\n      // Inline quick edit.\n      $(document).on('click', '.button-link.editinline', function () {\n        $('.inline-edit-private').parents('div.inline-edit-group').remove();\n        var rightCustomBox = jQuery('.inline-edit-col-right:not(.inline-edit-levels):visible');\n        var selectedStatus = jQuery('select', rightCustomBox).val();\n        jQuery(' > *', rightCustomBox).appendTo('.inline-edit-col-left:visible');\n        jQuery('.inline-edit-col-left:visible select[name=\"_status\"]').val(selectedStatus);\n      });\n      // Remove answer.\n      $(document).on('click', '.bdlms-remove-answer', this.removeAnswer);\n      // Add new answer.\n      $(document).on('click', '.bdlms-add-answer', this.addNewAnswer);\n      // Save inline edit.\n      $(document).on('click', '.bdlms-save-answer', this.saveInlineEdit);\n    },\n    /**\r\n     * Init sortable.\r\n     */\n    initSortable: function (obj) {\n      var _this = obj;\n      $('.bdlms-sortable-answers', document).sortable({\n        appendTo: 'parent',\n        axis: 'y',\n        containment: \"parent\",\n        items: 'ul.bdlms-options-table__list',\n        placeholder: \"sortable-placeholder\",\n        forcePlaceholderSize: true,\n        stop: function () {\n          _this.reorderAnswer();\n        }\n      }).disableSelection();\n    },\n    /**\r\n     * Hide answers.\r\n     */\n    hideAnswers: function () {\n      // Hide previous opned inline editor.\n      $('.inline-editor').prev().prev('tr').show();\n      $('.inline-editor').prev('tr.hidden').remove();\n      $('.inline-editor').remove();\n    },\n    /**\r\n     * Remove answer.\r\n     */\n    removeAnswer: function (e) {\n      e.preventDefault();\n      $(this).parents('ul.bdlms-options-table__list').remove();\n      questionBank.reorderAnswer();\n    },\n    /**\r\n     * Reorder answer.\r\n     */\n    reorderAnswer: function () {\n      $('.bdlms-sortable-answers .bdlms-options-table__list:visible').each(function (index, item) {\n        var AnsId = questionObject.alphabets[index];\n        $(item).find('.bdlms-options-no').text(AnsId + '.');\n        $(item).find('.bdlms-option-check-td input').val(index);\n      });\n    },\n    /**\r\n     * Add new answer.\r\n     */\n    addNewAnswer: function () {\n      var lastItem = $('ul.bdlms-options-table__list:visible:last, .bdlms-add-accepted-answers li:visible:last');\n      var newItem = lastItem.clone();\n      newItem.find('input').val('').removeAttr('value');\n      newItem.find('input:checkbox, input:radio').prop('checked', false).removeAttr('checked');\n      $(newItem).insertAfter(lastItem);\n      questionBank.reorderAnswer();\n    },\n    /**\r\n     * Save inline edit answers.\r\n     */\n    saveInlineEdit: function () {\n      var _this = $(this);\n      var params,\n        fields,\n        page = $('.post_status_page').val() || '';\n      var id = window._inlineEditQuestion.postId;\n      $('table.widefat .spinner').addClass('is-active');\n      _this.attr('disabled', true);\n      params = {\n        action: 'inline-save',\n        post_type: typenow,\n        post_ID: id,\n        edit_date: '',\n        post_status: page\n      };\n      fields = $('#edit-' + id).find(':input').serialize();\n      params = fields + '&' + $.param(params);\n\n      // Make Ajax request.\n      $.post(ajaxurl, params, function (r) {\n        var $errorNotice = $('#edit-' + id + ' .inline-edit-save .notice-error'),\n          $error = $errorNotice.find('.error');\n        $('table.widefat .spinner').removeClass('is-active');\n        if (r) {\n          if (-1 !== r.indexOf('<tr')) {\n            $(window._inlineEditQuestion.editRowId).siblings('tr.hidden').addBack().remove();\n            $('#edit-' + id).before(r).remove();\n            $(window._inlineEditQuestion.editRowId).hide().fadeIn(400, function () {\n              // Move focus back to the Quick Edit button. $( this ) is the row being animated.\n              $(this).find('[data-inline_edit]').attr('aria-expanded', 'false').trigger('focus');\n              wp.a11y.speak(wp.i18n.__('Changes saved.'));\n            });\n          } else {\n            r = r.replace(/<.[^<>]*?>/g, '');\n            $errorNotice.removeClass('hidden');\n            $error.html(r);\n            wp.a11y.speak($error.text());\n          }\n        } else {\n          $errorNotice.removeClass('hidden');\n          $error.text(wp.i18n.__('Error while saving the changes.'));\n          wp.a11y.speak(wp.i18n.__('Error while saving the changes.'));\n        }\n      }, 'html');\n\n      // Prevent submitting the form when pressing Enter on a focused field.\n      return false;\n    }\n  };\n  $(function () {\n    questionBank.init();\n  });\n})(jQuery, window.wp);\n\n//# sourceURL=webpack://bluedolphin-lms/./assets/js/src/questions.js?");

/***/ }),

/***/ "./assets/scss/questions.scss":
/*!************************************!*\
  !*** ./assets/scss/questions.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://bluedolphin-lms/./assets/scss/questions.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./assets/js/src/questions.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/scss/questions.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;